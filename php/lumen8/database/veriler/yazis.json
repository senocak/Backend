[
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da749",
        "baslik": "PHP Nedir?",
        "url": "php_nedir_",
        "icerik": "<p>PHP(açılımı <em>PHP: Hypertext Preprocessor</em>) geniş bir kitle tarafından kullanılan, özellikle sanal yöreler üzerinde geliştirme için tasarlanmış HTML içine gömülebilen bir betik dilidir.</p><p>Tamam da, bu tam olarak ne anlama gelmektedir? Bir örnek:</p><p><strong>örnek 1 - Başlangıç olarak bir örnek</strong></p>\n            <pre>\n<code class='language-php'>&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;Örnek&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;?php echo 'Merhaba, ben bir PHP betiğiyim!'; ?&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n            <p>Bir PHP betiğinin Perl ya da C gibi dillerden ne kadar farklı bir yapıda olduğuna dikkat edin. HTML kodu oluşturmak için bir sürü kod yazacağınıza, istediğiniz işi yapan bir PHP kodu yazıp onu HTML kodunun içine gömüyorsunuz (bu örnekte, yapılan iş ekrana yazı yazmak). PHP kodu<a href='/yazi/php-syntax' target='_blank'><code>&lt;?php</code>ve<code>?&gt;</code></a>özel başlangıç ve bitiş etiketleriarasına yazılır. Bu etiketler &quot;PHP kipine&quot; rahatlıkla girip çıkabilmenizi sağlarlar.</p><p>PHP&#39;yi Javascript gibi kullanıcı tarafında çalışan dillerden ayıran, sunucu tarafında çalıştırılıyor olmasıdır. Yukardaki örnekteki kodu kendi sunucunuzda çalıştırırsanız, sitenize bağlanan kullanıcılar kodu göremeyecekler ve müdahale edemeyecekler, yalnızca sonucu görebileceklerdir. Dilerseniz HTTP sunucunuzu bütün HTML dosyalarınızı PHP dosyası olarak görüp işleyecek hale bile getirebilirsiniz. Buna rağmen kullanıcılar sizin gerçekte sunucu taraflı bir uygulama kullandığınızı fark edemeyebilirler.</p><p>PHP kullanmanın en güzel yanlarından biri, yeni kullanıcılar için öğreniminin oldukça kolay olması ve aynı zamanda profesyonel kullanıcılar için ileri seviyede özellikler içermesidir. PHP&#39;nin uzun özellikler listesini okumaktan korkmayın. Kısa sürede PHP ile programlamaya başlayabilir ve birkaç saat içersinde basit programlar yazmaya başlayabilirsiniz.</p><p>PHP&#39;nin gelişimi sunucu-taraflı programlamaya odaklanmışsa da, çok daha fazlasını yapmanıza olanak tanıyan araçlara da sahiptir.</p>",
        "kategori_id": "1ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "php,laravel,mvc",
        "aktif": "1",
        "sira": "16",
        "created_at": "11/6/2020 18:38:53",
        "updated_at": "11/6/2020 18:38:53"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da750",
        "baslik": "Laravel Nedir?",
        "url": "laravel-nedir",
        "icerik": "<h3><strong>Laravel nedir?</strong></h3>\n\n<p>Laravel, PHP dili ile yazılmış, güçlü bir frameworkdür. Taylor Otwell önderliğinde geliştirmektedir. Söz dizimi basit ve anlamlıdır. Bu sebeple öğrenmesi daha kolaydır. Laravel içinde birçok yapıyı ve özelliği barındırır. Bunun sonucunda basit web uygulamalarında ya da karmaşık web sayfalarında rahatlıkla kullanılabilir.</p>\n\n<p>Laravel&rsquo;in sloganı &ldquo;The PHP Framework For Web Artisans&rdquo; yani &ldquo;Web sanatçılarının PHP Frameworkü&rdquo; dür.</p>\n\n<h3><strong>Laravel kimler içindir?</strong></h3>\n\n<p>Laravel, profesyonel ya da amatör web geliştiricileri tarafından kullanılabilir. OOP yapısı sebebiyle daha derli toplu, temiz, okunabilir kod yazılmasına olanak sağlar.</p>\n\n<h3><strong>Laravel öğrenmek için ön koşullar nelerdir?</strong></h3>\n\n<p>Laravel ile geliştirme yapmaya başlamak için, HTML/CSS bilgisine ve orta seviye PHP bilgisine ihtiyaç vardır. PHP hakkında hiç bilgim yok bu eğitimi anlayamam diyenler için önerimiz, <a href=\"/kategori/php/\" target=\"_blank\">PHP Eğitimlerine</a>göz atması ve bu dersleri bitirdikten sonra Laravel eğitimlerine devam etmesidir.</p>\n\n<h3><strong>La</strong><strong>ravel ile ilgili önemli bilgiler nelerdir?</strong></h3>\n\n<ul>\n\t<li>Bağımlılık yöneticisi (Dependency Manager) olarak <a href=\"/yazi/composer\" target=\"_blank\"><strong>Composer</strong></a> kullanır.</li>\n\t<li>İçinde <a class=\"external\" href=\"/yazi/eloquent\" target=\"_blank\"><strong>Eloquent ORM</strong></a> (Object Relational Mapping)&rsquo;yi barındırır. Bu yapıda veritabanındaki her bir tabloya karşılık gelen bir model sınıfı bulunur. Bu sayede uzun sorgu cümleleri yerine çok daha basit şekilde veritabanı sorguları yapmanızı sağlar. Ayrıca farklı veritabanlarından (Mysql, PostgreSql, MongoDB vb.) sorgularınızda değişiklik yapmadan sorgu yapabilme imk&acirc;nı sunar.</li>\n\t<li>Template engine olarak &ldquo;<a href=\"/yazi/blade\" target=\"_blank\"><strong>Blade</strong></a>&rdquo; kullanmaktadır. MVC(Model, View, Controller) mimarisinde View (V) kısmında denk gelmektedir. Bu yapı sayesinde php ve html kodlarımızı birbirinden ayırma imkanı sağlar.</li>\n\t<li>Gelişmiş <strong>routing</strong> yapısı sayesinde URL yapınızı hızlı ve kolay bir şekilde filtreleyebilir, controllera yönlendirebilirsiniz.</li>\n\t<li>Laravelin içerisinde kimlik doğrulama (<strong>Authentication</strong>) yapısı hazır olarak bulunmaktadır. Sadece birkaç komut yardımıyla login/logout/register gibi kullanıcı işlemleri uygulamanıza dahil edilebilir.</li>\n\t<li>Sadece birkaç satır kod ile verileri otomatik sayfalama (<strong>Pagination</strong>) özelliği bulunmaktadır.</li>\n\t<li>Form ve veri girişi kısımlarında bütünleşik <a href=\"/yazi/csrf\" target=\"_blank\"><strong>CSRF</strong></a> koruması bulunmaktadır.</li>\n\t<li>Migration ve seeder yapısıyla veritabanında tablo oluşturma, versiyonlama ve veri girişi işlemleri daha basit şekilde yönetilebilir.</li>\n\t<li>Yapısında birçok &ldquo;<a href=\"https://symfony.com/\" target=\"_blank\"><strong>symfony framework</strong></a>&rdquo; bileşenini barındırmaktadır. Ama Laravel öğrenmemiz için bizim symfony framework bilmemize gerek yoktur.</li>\n</ul>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "mvc,oop",
        "aktif": "1",
        "sira": "15",
        "created_at": "11/6/2020 18:38:53",
        "updated_at": "11/6/2020 18:38:53"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da751",
        "baslik": "Laravel Kurulumu-Windows",
        "url": "laravel-kurulumu-windows",
        "icerik": "<p><strong>Laravel için sunucu gereklilikleri nelerdir?</strong></p>\n\n<p>Şuan ki son Laravel versiyonu 5.8&rsquo;tür. Anlatım 5.8 üzerinden devam edecektir.</p>\n\n<p><a href=\"https://laravel.com/docs/5.8/installation\" rel=\"noopener nofollow\" target=\"_blank\">Laravel&rsquo;in dökümantasyonunda</a>belirtiği üzere eğer laravel için sağlanmış sanal makine kullanmak istemiyorsak aşağıdaki modülleri manuel olarak kurmalıyız.</p>\n\n<ul>\n\t<li>PHP &gt;= 7.1.3</li>\n\t<li>BCMath PHP Extension</li>\n\t<li>Ctype PHP Extension</li>\n\t<li>JSON PHP Extension</li>\n\t<li>Mbstring PHP Extension</li>\n\t<li>OpenSSL PHP Extension</li>\n\t<li>PDO PHP Extension</li>\n\t<li>Tokenizer PHP Extension</li>\n\t<li>XML PHP Extension</li>\n</ul>\n\n<p><strong>Peki, biz bu gereklilikleri nasıl sağlayacağız?</strong></p>\n\n<ul>\n\t<li>Bunun için &ldquo;<a href=\"https://laravel.com/docs/5.8/homestead\" rel=\"noopener nofollow\" target=\"_blank\">Laravel Homestead</a>&rdquo; kullanabilirsiniz. Bu hepsi bir arada (all in one) bir çözümdür.</li>\n\t<li>PHP&rsquo;yi kendiniz kurabilirsiniz.</li>\n\t<li>Wamp/Xammp gibi bir çözüm kullanabilirsiniz. (<strong>Bu eğitimde bu yöntemi kullanacağız.</strong>)</li>\n</ul>\n\n<h2><strong>Xampp kurulumu</strong></h2>\n\n<p>Xampp kurulumu için<a href=\"https://www.apachefriends.org/tr/download.html\" rel=\"noopener\" target=\"_blank\">tıklayınız.</a></p>\n\n<p><strong>!!</strong>Dikkat etmeniz gereken PHP sürümünün en az 5.6.4 olması gerektiğidir.</p>\n\n<h2><strong>Composer Kurulumu</strong></h2>\n\n<p>Xampp kurulumunu tamamladıktan sonra daha önce bahsetmiş olduğumuz &ldquo;<strong>Composer</strong>&rdquo; (Dependency Manager/Bağımlılık Yöneticisi) yüklememiz gerekiyor. Composer&rsquo;ı<a href=\"https://getcomposer.org/download/\" rel=\"noopener nofollow\" target=\"_blank\">https://getcomposer.org/download/</a>adresinden indirip kuralım. Dikkat edilmesi gereken nokta composer&#39;i kurmadan önce sisteminizde php/xampp kurulu olması gerekiyor.</p>\n\n<h2><strong>Laravel Kurulumu</strong></h2>\n\n<p>Laravel&rsquo;i kurmak için kullanabileceğimiz birçok yöntem var.</p>\n\n<ol>\n\t<li>Composer aracılığı ile kurma,\n\t<ol>\n\t\t<li>&quot;<strong>composer global require laravel/installer</strong>&quot; komutunu konsol ekranında çalıştıralım.</li>\n\t\t<li>Laravel projesi oluşturulmak istenilen dizinde &quot;<strong>laravel new proje_ismi</strong>&quot; diyerek kurabiliriz.</li>\n\t</ol>\n\t</li>\n\t<li>Laravel&#39;i tüm sistemimizde global tanımlamak yerine composer aracılığı ile direk githubtan indirebiliriz.\n\t<ol>\n\t\t<li>&quot;<strong>composer create-project --prefer-dist laravel/laravel proje_ismi</strong>&quot;</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>Projemizi çalıştırmak için ilgili dizine komut satırı ile gidip &quot;<strong>php artisan serve</strong>&quot; yazmak. Ekranda örnek olarak &quot;<strong>http://127.0.0.1:8000</strong>&quot; gibi bir url verecek. Tek yapılması gereken browserdan bu adrese gimek</p>\n\n<p><img alt=\"php artisan serve\" src=\"/assets/fileman/Uploads/laravel_run.png\" /></p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,composer,framework",
        "aktif": "1",
        "sira": "14",
        "created_at": "11/6/2020 18:38:53",
        "updated_at": "11/6/2020 18:38:53"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da752",
        "baslik": "Laravel Uygulama Yapısı",
        "url": "laravel-uygulama-yapisi",
        "icerik": "<h2><strong>Laravel Anadizin Yapısı</strong></h2><ul><li><strong>app:</strong>Bu klasör içerisinde uygulamanın asıl kodları bulunacaktır.</li><li><strong>bootstrap:</strong>Uygulamanın autoload ve cache (önbellek) kısımlarını barındırmaktadır.</li><li><strong>config:</strong>Uygulamanın ayar dosyaları bu klasörde bulunmaktadır.</li><li><strong>database:</strong>Veritabanı operasyonları için kullanılan &ldquo;Seeds&rdquo; ve &ldquo;Migrations&rdquo; bu klasörde bulunmaktadır.</li><li><strong>public:</strong>Bu klasör uygulamanın &ldquo;document root&rdquo; kısmıdır. Laravel&rsquo;in çalışmasını başlatır ayrıca &ldquo;Assets&rdquo; (Javascrip, CSS, Resimler vb.) kısmını barındırır.</li><li><strong>resources:</strong>Bu klasörde herhangi bir işlem yapılmamış (Sıkıştırma, Birleştirme, Gizleme vs) dosyalar, view (görünüm) dosyaları ve dil dosyaları bulunmaktadır.</li><li><strong>storage:</strong>Bu klasör uygulamanın depolama alanıdır. İçerisinde, dosya yüklemelerini, önbellekleme (cache) dosyalarını ve uygulamanın log dosyalarını barındırır.</li><li><strong>tests:</strong>Bu klasör test dosyalarını barındırır.</li><li><strong>vendor:</strong>Bu klasörde uygulamanın &ldquo;Composer Dependencies&rdquo; (paket bağımlılıkları) bulunmaktadır.</li></ul><h2><strong>Laravel App Klasörü Yapısı</strong></h2><ul><li><strong>Console:</strong>Tüm &ldquo;<u>artisan</u>&rdquo; komutları bu klasörde bulunmaktadır.</li><li><strong>Http:</strong>&ldquo;<u>Controllers</u>&rdquo;, &ldquo;<u>Middleware</u>&rdquo;, &ldquo;<u>Request</u>&rdquo; bu klasörde bulunmaktadır.</li><li><strong>Exceptions:</strong>özel &ldquo;<u>Exception Handlers</u>&rdquo; bu klasörde bulunmaktadır.</li><li><strong>Providers:</strong>&ldquo;<u>Providers</u>&rdquo; (Servis Sağlayıcılar) bu klasörde bulunmaktadır.</li></ul>",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,composer,framework",
        "aktif": "1",
        "sira": "13",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "11/6/2020 18:38:54"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da753",
        "baslik": "Laravel Konfigürasyonu",
        "url": "laravel-konfigurasyonu",
        "icerik": "<h2><strong>Kurulum Sonrası Kontroller</strong></h2><p>öncelikle, Laravel kurulumundan sonra yapmamız gereken birkaç kontrol ve işlem bulunmaktadır.</p><ol><li>Ana dizinde bulunan &ldquo;storage&rdquo; ve &ldquo;bootstrap/cache&rdquo; klasörlerinin yazma izni kontrolü yapılmadır, yazma izni yoksa yazma izni verilmelidir.</li><li>&ldquo;<strong>php artisan key:generate</strong>&rdquo; komutu ile uygulama anahtarı oluşturulmalıdır. Bu anahtar session ve diğer şifrelenmiş verilerin güvenliğinde kullanılacaktır.</li><li>Ana dizinde &ldquo;<em>.env</em>&rdquo; dosyası olup olmadığı kontrolü yapılmadır. Bu dosya composer ile kurulumda yada &ldquo;php artisan key:generate&rdquo; komutuyla otomatik olarak oluşmalıdır. Eğer yoksa &ldquo;.env.example&rdquo; dosyasının adı &ldquo;.env&rdquo; yapılıp, &ldquo;<strong>php artisan key:generate</strong>&rdquo; komutu tekrar çalıştırılmalıdır. &ldquo;<em>.env</em>&rdquo; dosyasıgeliştirme ortamımız ile ilgili değişkenleri içermektedir.</li></ol><h3><strong>Konfigürasyon Dosyaları ve Geliştirme Ortamı Konfigürasyonu</strong></h3><ul><li><strong>app.php</strong>: Bu dosyada uygulamamız ile ilgili ayarlar bulunmaktadır. (Uygulama adı, adresi, debug durumu, dil ve timezone gibi ayarlar bulunmaktadır.)</li><li><strong>database.php</strong>: Veritabanı ile ilgili ayarlar bulunmaktadır. (Varsayılan veritabanı bağlantı türü, desteklenen veritabanı bağlantı bilgileri vb. ayarlar bulunmaktadır. )</li></ul><p>Bu yazıda yüksek öneme sahip 2 dosyadan bahsettik.</p><p>database.php içeriği:</p>\n<pre>\n<code class='language-php'>'mysql' =&gt; [\n    'driver' =&gt; 'mysql',\n    'url' =&gt; env('DATABASE_URL'),\n    'host' =&gt; env('DB_HOST', '127.0.0.1'),\n    'port' =&gt; env('DB_PORT', '3306'),\n    'database' =&gt; env('DB_DATABASE', 'laravel'),\n    'username' =&gt; env('DB_USERNAME', 'root'),\n    'password' =&gt; env('DB_PASSWORD', ''),\n    'unix_socket' =&gt; env('DB_SOCKET', ''),\n    'charset' =&gt; 'utf8',\n    'collation' =&gt; 'utf8_unicode_ci',\n    'prefix' =&gt; '',\n    'prefix_indexes' =&gt; true,\n    'strict' =&gt; true,\n    'engine' =&gt; null,\n    'options' =&gt; extension_loaded('pdo_mysql') ? array_filter([\n        PDO::MYSQL_ATTR_SSL_CA =&gt; env('MYSQL_ATTR_SSL_CA'),\n]) : [],\n],</code></pre>\n            <p>&ldquo;env&rdquo; fonksiyonunun kullanıldığını görmekteyiz.Peki, bu &ldquo;env&rdquo; fonksiyonu ne işe yarar?Dersin başında &ldquo;.env&rdquo; olarak isimlendirdiğimiz dosyadaki parametreleri, config dosyalarımızda kullandığımız env() fonksiyonu ile okuyabiliriz.</p>\n            <pre>\n<code class='language-php'>env('.env dosyasındaki parametre adı', 'varsayılan değer')</code></pre><p>şeklinde kullanılabilir..env dosyası geliştirme ortamımızın konfigürasyon bilgilerini tek bir yerden yönetmemizi sağlar.Birden çok geliştirme ortamı olması durumunda, .env.testing, .env.production, .env.local gibi ayarlamalar yapılabilir.Tanımlamış olduğumuz konfigürasyon değişkenlerine uygulama içerisinde aşağıdaki şekilde ulaşabiliriz.</p>\n<pre><code class='language-php'>&#0036value = config('config dosyası adı.parametre anahtarı');\n&#0036value = config('app.timezone');</code></pre>\n<h3><strong>Bakım Modu (maintenance mode)</strong></h3>\n<p>Bakım modu aktif edildiğinde, sitenize gelen ziyaretçiler bakım modu ekranını görürler. Bu süreçte sitenizde herhangi bir işlem yapılamaz. Siz de gerekli gerekli güncelleme veya geliştirmeleri sitenize uygulayabilirsiniz.</p>\n<p>Bakım modu;</p>\n<pre>\n<code class='language-php'>php artisan down</code>\n</pre>\n<p>komutuyla aktif edilir.</p>\n<pre>\n<code class='language-php'>php artisan up</code></pre>\n<p>komutuyla inaktif edilir. Ayrıntılı mesaj vermek ve belirli sürelerde ziyaretçinin otomatik deneme yapmasını isterseniz,</p>\n<pre>\n<code class='language-php'>php artisan down --message='Veritabanı güncelleniyor.' --retry=60</code></pre><p><img alt='' src='/upload/files/laraveldown.png' /></p>",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,framework,config",
        "aktif": "1",
        "sira": "12",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "11/6/2020 18:38:54"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da754",
        "baslik": "Laravel Route Sistemi ve Kullanımı",
        "url": "laravel-route-sistemi-ve-kullanimi",
        "icerik": "\n<p>Route kullanımı laravel kurulumundan sonra sistemi öğrenmek için atılacak temel adımdır. Route ile sisteminize gelecek olan istekleri<strong>Controller</strong>,<strong>View</strong>gibi bölümlere yönlendir ve istek için çalışacak kod parçacıklarına ulaşırsınız. Bunun için laravel framework yapısını route ile öğrenmeye başlamak uygun olacaktır.</p><p>Güncel dökümana bu <a href='https://laravel.com/docs/5.8/routing' target='_blank'>adresten</a> ulaşabilirsiniz.Laravel kurulum dizininde yer alan &lsquo;<strong>routes/web.php</strong>&rsquo; dosyasını açıyoruz.Sıfır kurulum yaptığımızı düşünürsek eğer karşımıza yorum kısmı hariç aşağıdaki kod gelecektir.</p>\n<pre>\n<code class='language-php'>Route::get('/', function () {\n    return view('welcome');\n});</code></pre>\n<p>Bu kod, sitenizin giriş ekranı yani &lsquo;/&rsquo; için &lsquo;welcome&rsquo;<strong>View</strong>dosyasının çalışacağını belirtir. Burada yer alan &lsquo;<u>Route::get&hellip;</u>&rsquo; bölümü ise isteğin geldiği methodu belirtir. Kullanabileceğimiz methodlar;</p>\n<pre>\n<code class='language-php'>Route::get(&#0036url, &#0036callback);\nRoute::post(&#0036url, &#0036callback);\nRoute::put(&#0036url, &#0036callback);\nRoute::patch(&#0036url, &#0036callback);\nRoute::delete(&#0036url, &#0036callback);\nRoute::options(&#0036url, &#0036callback);</code>\n</pre>\n<p>Burada önemli bir not belirtmekte fayda görüyorum. <strong>POST</strong>, <strong>PUT </strong>ve <strong>DELETE </strong>methodlarını çağırabilmek için <strong><a href='/yazi/csrf' target='_blank'>CSRF</a></strong>koruması yapmamız gerekli. Buna daha sonraki derslerimizde bahsedeceğim ama bu yazıda ufak bir not olarak belirtmek istedim.</p>\n<p>Konumuza dönecek olursak &lsquo;<strong>&#0036url</strong>&rsquo; gelen internet sitenizin adresi, &lsquo;<strong>&#0036callback</strong>&rsquo; ise çalışacak fonksiyonu belirtiyor. İlk örneğimize bakarsak çalışacak &lsquo;<strong>&#0036url</strong>&rsquo; için &lsquo;<strong>/</strong>&rsquo; girilmiş ve &lsquo;<strong>&#0036callback</strong>&rsquo; içinse function ile başlayan bölüm belirtilmiş. Burada fonksiyon ile beraber &lsquo;<strong>View</strong>&lsquo; çalışması sağlanmış.</p>\n<p>Route ile<strong>Controller</strong>çağırmak için aşağıdaki gibi bir kod gereklidir.</p>\n<pre>\n<code class='language-php'>Route::get('kullanici/profil', 'UserController@uyeGoster');</code>\n</pre>\n<p>Gördüğünüz bile kullanılacak<strong>Controller</strong>çağırmak için &lsquo;UserController@uyeGoster&rsquo; kullanıyoruz. Bu değişkende ilk önce<strong>Controller</strong>ismi daha sonrada fonksiyonun adı kullanılmalıdır.</p>\n<h3><strong>Laravel Route İsimlendirme</strong></h3>\n<p>Laravel route için isimlendirme (<strong>Name</strong>) kullanımı sistem içerisinde route için link verebilmeyi kolaylaştırmak için yapılır.</p>\n<pre>\n<code class='language-php'>Route::get('kullanici/profil', 'UserController@uyeGoster')-&gt;name('profil');</code>\n</pre>\n<p>Yukarıdaki örnekte bu route için isimlendirme kullandık. Bu isimlendirmeyi laravel view içerisinde de şu şekilde kullanıyoruz;</p>\n<pre>\n<code class='language-php'>route('profil');</code>\n</pre>\n<p>Bu sayede route için gerekli link otomatik olarak oluşturulacaktır.</p>\n<h3><strong>Laravel Route Gruplandırma</strong></h3>\n<p>Gruplandırma<strong>middleware, namespace, prefix</strong>gibi birçok route bağlantısı olan durumlar için uygundur.</p>\n<pre>\n<code class='language-php'>Route::namespace('Admin')-&gt;group(function () {\n    Route::get('yonetici', 'UserController@yoneticiGoster');\n});</code>\n</pre>\n<p>Yukarıdaki örnekte kullanılacak olan<strong>Controller</strong>dosyalarının &lsquo;Admin&rsquo; klasörü altında olduğunu belirttik. Prefix için de bir örnek verelim.</p>\n<pre>\n<code class='language-php'>Route::prefix('admin')-&gt;group(function () {\n    Route::get('yoneticiler', 'UserController@yoneticiListele');\n});</code>\n</pre>\n<p>Bu örnekte ise url adresinin ilk bölümünde &lsquo;admin&rsquo; gelen bağlantıların yapılacaklarını belirttik. Daha kısa bir açıklama ile buradaki route bilgisine ulaşmak için gelen adresin &lsquo;admin/yoneticiler&rsquo; olması gereklidir.</p>\n<h3><strong>Laravel Route Parametre Kullanımı</strong></h3>\n<p>Route ile gelen parametreleri yönlendirebiliriz. Bunun için adresten alınabilecek parametreleri belirtmemiz gerekli.</p>\n<pre>\n<code class='language-php'>Route::get('yonetici/{id}', 'UserController@yoneticiGoster');</code>\n</pre>\n<pre>\n<code class='language-php'>Route::get('yonetici/{id?}', 'UserController@yoneticiGoster');</code>\n</pre>\n<p>Bu kodlar birbirininden tek farkı alttakinde yer alan &lsquo;?&rsquo;. önce soru işareti olmayanı açıklayayım. Burada adresimiz &lsquo;/yonetici/1&rsquo; olarak gelmelidir. Bu örnekte kullanılan &lsquo;1&rsquo; id yerine geçer ve kodun devamında yer alan<strong>Controller</strong>içerisinde kullanılacak bir parametre olarak gönderilir. İkinci kod parçasında ise soru işareti ile anlattığımız şey parametre olabilir ya da olmayabilir demektir. Yani ilk kod ile &lsquo;yonetici&rsquo; adresini çalıştıramayız hata alırız ama ikinci kısım ile hem &lsquo;yonetici&rsquo; hem de &lsquo;yonetici/1&rsquo; adreslerini çalıştırabiliriz. Bunun en yaygın örneği olarak şu senaryoyu düşünebiliriz. Bir yönetim panelinde kullanıcıları listeleyecek ve bu listeden seçilen kullanıcının detay bilgisini göstereceksiniz. Bunun için laravel route sistemini iki şekilde yapabilirsiniz.</p>\n<pre>\n<code class='language-php'>Route::get('kullanici', 'UserController@yoneticiGoster');\nRoute::get('kullanici/{id}', 'UserController@yoneticiGoster');</code></pre>\n<p>veya</p>\n<pre>\n<code class='language-php'>Route::get('kullanici/{id?}', 'UserController@yoneticiGoster');</code>\n</pre>\n<p>Tabi arada bir satır var gibi görünse de oluşturacağınız sistem büyüdükçe bu kullanımın yararını görebilirsiniz. Unutmamak gerekir ki sistemi temiz kod yani takip edilebilir/anlaşılır yazmak günümüz dünyasında son derece önemlidir.</p>\n            ",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,framework,routes,routing",
        "aktif": "1",
        "sira": "11",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "11/6/2020 18:38:54"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da755",
        "baslik": "Laravel Controller Yapısı ve Oluşturulması",
        "url": "laravel-controller-yapisi-ve-olusturulmasi",
        "icerik": "<h3><strong>Laravel Controller Nedir?</strong></h3>\n\n<p>Laravel Controller, MVC yapısında frontend ve backend arasında işlem gören katmandır. Bunu biraz açmak gerekirse; mesela kullanıcıların önyüzde etkileşimde oldukları bir form(üye giriş formu) ile bu formun veritabanında yapılacağı sorgular arasında işlem yapılan kısmıdır. Aslında bizim veritabanı işlemlerini ve/veya kullanıcıdan gelen verileri işleyeceğimiz bölümdür. Yaptığımız bu girişten sonra hemen Laravel Controller oluşturmaya başlayalım.</p>\n\n<h3><strong>Artisan Kullanarak Controller Oluşturma</strong></h3>\n\n<p>Bildiğiniz üzere Laravel sisteminde Artisan CLI (komut satırı arayüzü) bulunmaktadır. Bu arayüz bizi bir çok dertten kurtarır ve projelerimize hız kazandırır. Artisan arayüzünü kullanarak Controller, Model, Migration oluşturabiliriz. Artisan ile Laravel Controller oluşturmak için öncelikle komut satırı yardımı ile sistemimizde Laravel yapısının yüklü olduğu ana dizine erişiyoruz. Benim bilgisayarım için bu adres;</p>\n\n<pre>\n<code class=\"language-bash\">C:/xampp/htdocs/proje_dizini</code></pre>\n\n<p>Daha sonraaşağıda yer alan kod bloğunu yazıyoruz(ya da kopyala yapıştır yapıyoruz).</p>\n\n<pre>\n<code class=\"language-php\">php artisan make:controller AdminController</code></pre>\n\n<p>Bu kod satırında sonra bulunan &lsquo;<strong>AdminController</strong>&rsquo; bizim oluşturduğumuz Laravel Controller için belirlediğimiz ad olacaktır.</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PageController extends Controller{\n    //\n}</code></pre>\n\n<p>Yazımın başında da belirttiğim gibi controller ile veritabanı işlemlerini yapabiliyoruz. Burada (belki daha önceden de bildiğiniz)<strong>CRUD</strong>kavramından kısaca bahsetmem gerek.<strong>CRUD</strong>, ingilizce Create(Oluştur)-Read(Oku)-Update(Güncelle)-Delete/Destroy(Sil) kelimelerinin baş harflerinden oluşmuş bir kısaltmadır aslında. Daha önce kullandığımız artisan komutuna basit bir parametre ekleyerek<strong>CRUD</strong>için gerekli tüm fonksiyonları oluşturabiliriz. Yine Laravel yüklediğimiz anadizine geliyor ve aşağıdaki gibi daha önce yazdığımı kodun sonuna<strong>&ndash;resource</strong>ekliyoruz.(önceki örneği çalıştırdıysanız Controller adı farklı olmalıdır)</p>\n\n<pre>\n<code class=\"language-php\">php artisan make:controller PageController --resource</code></pre>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PageController extends Controller{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(){\n        //\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(){\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request){\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id){\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id){\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id){\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id){\n        //\n    }\n}</code></pre>\n\n<p>Farkı görebilirsiniz. Temel olarak CRUD için gerekli tüm fonksiyonları tek bir satır ile oluşturduk. Bu fonksiyonları bira daha açıklamaya çalışayım. PageController ın Sayfa(Page) işlemleri için kullanıldığını varsayalım.</p>\n\n<ul>\n\t<li><strong>index()</strong>-&gt; tüm sayfaları listeme için kullanılan fonksiyon,</li>\n\t<li><strong>create()</strong>-&gt; yeni bir sayfa oluşturmak için kullanılacak formu oluşturan fonksiyon</li>\n\t<li><strong>store()</strong>-&gt; yeni sayfanın veritabanına yazılmasını kontrol eden fonksiyon</li>\n\t<li><strong>edit()</strong>-&gt; düzenlenecek sayfanın formunu oluşturan fonksiyon</li>\n\t<li><strong>update()</strong>-&gt; düzenlenecek sayfanın işlemlerini yapan fonksiyon</li>\n\t<li><strong>destroy()</strong>-&gt; sayfayı yok edensilinmesi için kullanılan fonksiyon</li>\n</ul>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,controller,framework",
        "aktif": "1",
        "sira": "10",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "11/6/2020 18:38:54"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da756",
        "baslik": "Laravel Controller Veri Aktarımı",
        "url": "laravel-controller-veri-aktarimi",
        "icerik": "<h3><strong>Route ile Laravel Controller Veri Aktarımı</strong></h3>\n\n<p>Daha önceki derslerde bahsettiğimiz gibi route Laravel yapısı için gelen isteklerin yönlendirildiği alanlardır. Yani route ile controller yönlendirmesi yapabileceğimiz için veri aktarımını da yapabilmemiz gerekli. Başka bir değişle; .htaccess ile yaptığımız php dosyalarına veri aktarımını route ile yapabiliyoruz.</p>\n\n<p><img alt=\"laravel controller veri aktarımı\" src=\"/assets/fileman/Uploads/route-controller-veri-aktarimi-1024x535.jpg\" style=\"height:366px; width:700px\" /></p>\n\n<p>Yukarıdaki ekran görüntüsünde sol bölüm <strong>routes/web.php</strong> ve sağ bölümdeki görsel ise <strong>app/Http/Controllers/PageController.php</strong>. Sol tarafa dikkat ederseniz iki adet yeni route var. Bunlar arasındaki fark tek bir soru işaretidir. Bu soru işaretinin anlamı ise &ldquo;id&rdquo; değişkeni olabilir ya da olmayabilir olarak değerlendirilir. Yani</p>\n\n<pre>\n<code class=\"language-php\">Route::get('sayfa/{id}', 'PageController@index');</code></pre>\n\n<p>olan kod satırı için &ldquo;id&rdquo; mutlaka olmalıdır. Olmadığında route hatası alınacaktır.</p>\n\n<p>Fakat;</p>\n\n<pre>\n<code class=\"language-php\">Route::get('sayfa/{id?}', 'PageController@index');</code></pre>\n\n<p>olan kod satısı içinse &ldquo;id&rdquo; değişkeni şart değildir.</p>\n\n<p>Bu şekildeki url adreslerini contoller fonksiyonunda ise değişken atayarak kullanıyoruz. Sağ tarafta bulunan index($id) fonksiyonu url adresinden gelen id yi controller içinde kullanılabilir duruma getiriyor.</p>\n\n<h3><strong>View ile Laravel Controller Veri Aktarımı</strong></h3>\n\n<p>Route ile gelen, controller içerisinde oluşturulan ve/ya veritabanı ile yapılan işlemler sonrası getirilen verilerin view tarafına ulaştırılmasıdır.Bu aşamada yukarıdaki ekran görüntüsünü baz aldığımızda page view&rsquo;a aktarmak için;</p>\n\n<pre>\n<code class=\"language-php\">return view('page', compact('id'));</code></pre>\n\n<p>yada</p>\n\n<pre>\n<code class=\"language-php\">return view('page')-&gt;with('id', $id);</code></pre>\n\n<p>Yukarıdaki kod blokları iki şekilde de aynı şekilde sonuçlanır ve bu şekilde contorller ile view arasında veri aktarımını sağlamış oluruz. İlerki derslerde değinebilir ama yeri gelmişken view içerisinde bu değişkeni nasıl yazdırıldığından bahsetmek istiyorum. Blade dosyasında sadece yazdırmak için</p>\n\n<pre>\n<code class=\"language-php\">Gelen id: {{$id}}</code></pre>\n\n<p>kod bloğunu kullanabildiğimiz gibi</p>\n\n<pre>\n<code class=\"language-php\">Gelen id: &lt;?php echo $id; ?&gt;</code></pre>\n\n<p>şeklinde de bildiğimiz php ile yazdırabiliriz.</p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "mvc,oop",
        "aktif": "1",
        "sira": "9",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "11/6/2020 18:38:54"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da757",
        "baslik": "Laravel Blade Templates",
        "url": "laravel-blade-templates",
        "icerik": "<h3><strong>Laravel Blade Templates</strong></h3>\n\n<p>Blade aslında bir şablon sistemidir. İçerisine alışık olduğunu PHP kodlarını da yazabilmeniz bir çok yazılımcının Laravel öğrenirken kendini rahat hissetmesini sağlamaktadır. Daha önce PHP ile site ya da uygulama yazdıysanız özellikle üst veya alt kısımlar için tek bir dosya kullanıp, onu her sayfaya &lsquo;include&rsquo; ile çağırmışsınızdır. Bunun amacı tüm sitenizin üst kısmında yapacağınız değişikliğin tek tek her php dosyasında değil; tek bir yerden yapmanızı sağlamaktır. Laravel Blade Templates, içinse bu özellik layouttur. PHP ile yaptığınız &lsquo;include&rsquo; durumundan farklı olarak burada bir ana şablon tanımlar ve diğer sayfaları bu şablonu &lsquo;extend&rsquo; ederek oluşturursunuz. Hemen bir şablon örneği yazalım.</p>\n\n<pre>\n<code class=\"language-php\">&lt;!DOCTYPE html&gt;\n&lt;html lang='en'&gt;\n&lt;head&gt;\n    &lt;meta charset='UTF-8'&gt;\n    &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;\n    &lt;meta http-equiv='X-UA-Compatible' content='ie=edge'&gt;\n    &lt;title&gt;@yield('baslik')&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    @yield('icerik')\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Yukarıdaki şablona dikkat ederseniz &lsquo;title&rsquo; etiketleri arasında @yield(&lsquo;başlık&rsquo;) kodunu yerleştirdik. Bu oluşturacağımız diğer sayfalar ile bu bölümünün iletişimini sağlayacak olan kod kısmıdır. Şimdi de bir alt daha doğrusu genişletilmiş bir sayfa yazalım.</p>\n\n<pre>\n<code class=\"language-php\">@extends('sablon')\n@section('baslik', 'Sayfa Başlık')\n@section('icerik')\n    &lt;p&gt;Buraya içerik gelecek&lt;/p&gt;\n@endsection</code></pre>\n\n<p>Şablon sayfamızdaki değişkenlerle bir sayfa oluşturmak çok kolaylaştı. İhtiyacımız olan alanları ekleyip o alanları doldurmamız yeterli olacak.</p>\n\n<p>İlk satırda yer alan &lsquo;extends&rsquo; oluşturduğumuz alt sayfanın hangi üst sayfadan çoğaltılacağını açıklıyor. Daha sonrada sizin de göreceğiniz gibi baslik ve icerik için gerekli alanları belirterek alt sayfanın verilerini bu alanlara yazdık. Bu şekilde alt sayfalar için genel bir şablona sahip oluyoruz.</p>\n\n<h2>Laravel Blade Templates Döngüler</h2>\n\n<p>Yazılım dillerinde belki de en çok kullanılan terimlerdir döngüler. Bu yüzden yazımda bu döngülere değinmenin uygun olacağını düşündüm.<img alt=\"laravel blade templates kullanımı\" src=\"/assets/fileman/Uploads/laravel-blade-templates-1024x325.jpg\" style=\"height:222px; width:700px\" /></p>\n\n<p>üstteki ekran görüntülerinde sol taraf blade ile sağ taraf ise düz PHP ile yapılmıştır. özellikle sol bölümde seçili alanda önemli bir nokta var. PHP kodlarının içerisine bir yazı yazdırmak istediğimizde ya PHP etiketlerini kapatmamız ya da &lsquo;echo&rsquo; kullanmamız gerekli. Fakat Laravel Blade Templates için bu duruma gerek yok. Döngüler kendi satırlarında biter ve alt satıra indiğinizde artık orası HTML olarak okunur.</p>\n\n<p>Yine sol tarafta görebileceğiniz gibi değişkenler de &lsquo;{{&lsquo; ile &lsquo;}}&rsquo; arasına yazılarak kısaltılmış bir &lsquo;echo&rsquo; kullanılmış olunuyor. Kullanılan çift süslü parantezler XSS engellemen adına &lsquo;htmlspecialchars&rsquo; fonksiyonu kullanılmış hali ile gelmektedir. Yani HTML etiketleri bu değişkenden temizlenir. Siz eğer HTML etiketli halini kullanmak isterseniz &lsquo;{!!&rsquo; ile &lsquo;!!}&rsquo; arasına yazmalısınız değişkeninizi. Yine bir örnek kod ile anlatmaya çalışayım.</p>\n\n<pre>\n<code class=\"language-php\">$x = '&lt;p&gt;Buraya bir paragraf gelecek&lt;/p&gt;';\n{{$x}} // çıktısı Buraya bir paragraf gelecek\n{!!$x!!} // çıktısı &lt;p&gt;Buraya bir paragraf gelecek&lt;/p&gt;</code></pre>\n\n<p></p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,composer,framework,oop,blade",
        "aktif": "1",
        "sira": "9",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "12/6/2020 10:25:58"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da758",
        "baslik": "Laravel Model Yapısı ve Kullanımı",
        "url": "laravel-model-yapisi-ve-kullanimi",
        "icerik": "<h2><strong>Laravel Model Nedir?</strong></h2>\n\n<p>Laravel Model, MVC yapısında veritabanı işlemlerinin yapıldığı bölümdür. Daha önceki yazılarımdan birinde Controller yapısından bahsederken, backend işlemlerinin de Controller tarafından yapıldığından bahsetmiştim. Controller, Model aracılığı ile bu işlemleri yapmaktadır. Yani Model, veritabanı iletişiminden sorumlu kısımdır.</p>\n\n<h2><strong>Artisan Kullanarak Model Oluşturma</strong></h2>\n\n<p>Daha önceki yazılarımda bahsettiğim gibi Laravel Artisan CLI bizim işimizi kolaylaştırmaktadır. Bu komut satırını öğrenmenin hız kazanma adına yararı olduğunu düşünüyorum. Artisan kullanarak Laravel Model oluşturmak için öncelikle komut satırı kullanarak Laravel ana dizine erişiyoruz. Benim bilgisayarım için bu adres;</p>\n\n<pre>\n<code class=\"language-bash\">C:/xampp/htdocs/proje_dizini</code></pre>\n\n<p>Daha sonraaşağıda yer alan kod bloğunu yazıyoruz(ya da kopyala yapıştır yapıyoruz).</p>\n\n<pre>\n<code class=\"language-php\">php artisan make:model Page</code></pre>\n\n<p>Yukarıda yer alan kod satırı sayesinde &lsquo;Page&rsquo; Model dosyasını oluşturuyoruz. Model oluşturma başarı ile sonuçlandıysa app klasörünün altında Page isimli bir dosya olmuşması gereklidir.</p>\n\n<p><img alt=\"laravel model oluşturma\" src=\"/assets/fileman/Uploads/laravel-model.jpg\" style=\"height:538px; width:700px\" /></p>\n\n<p>Tabi burada unutmamamız gereken Model ile kullanılacak veritabanı tablosununda olması. Bu işlem için isterseniz manuel olarak bir tablo oluşturabilirsiniz ya da yine Artisan kullanarak Migration oluşturabilirsiniz.Henüz Migration yapısından bahsetmediğimiz için biz bu yazıda manuel olarak bir tablo oluşturalım. Veritabanı değişkenlerini .env dosyasından alacağız buradaki değişikliklerin yapılmış olmasına dikkat edelim. Eğer .env size yabancı geldi ise<a href=\"/yazi/laravel-konfigurasyonu\" rel=\"noopener\" target=\"_blank\">Laravel Konfigürasyonu</a>yazıya bir göz atmanızı tavsiye ederim.</p>\n\n<p>Yine kendi kurulumuma göre benim .env dosyamdaki veritabanı ile ilgili kısım şu şekildedir;</p>\n\n<pre>\n<code class=\"language-php\">DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=dbismi\nDB_USERNAME=root\nDB_PASSWORD=</code></pre>\n\n<p>tabi lokal bir kurulum olduğu için şifre kısmı boş bırakılmıştır. Gerçek sunucuda bu bölümün güçlü bir şifre ile dolu olması gereklidir.</p>\n\n<p>Phpmyadmin yardımı ile dbismi adlı bir veritabanı oluşturup içerisine pages tablosunu ekledim. Tablo yapısı ise</p>\n\n<pre>\n<code class=\"language-php\">id =&gt; int 11, primary key, autoincrement\nbaslik =&gt; varchar 100\nicerik =&gt; text\naktif =&gt; int 1, default 0</code></pre>\n\n<p>Burada Laravel Model için önemli bir konuya dikkat etmeniz gerekmektedir. Oluşturduğunuz Model adı ile veritabanındaki tablo arasında bir ilişki vardır. Bu ilişki oluşturduğunuz tablonun, Model isminin küçük harf ile başlayan ve İngilizce olarak çoğul yapılmış hali olmasıdır.</p>\n\n<pre>\n<code class=\"language-php\">Page (model) =&gt; pages (tablo)\nCity (model) =&gt; cities (tablo)</code></pre>\n\n<p>Peki bu şart mı? tabi ki hayır fakat proje takip edilebilirliği ve hız bakımından tavsiye edilen methoddur. Diyelim ki siz bunu yapmak istemiyor veya daha önceki projenizi Laravel yapısına taşımak istiyorsunuz. Tablo isminizi &lsquo;sayfalar&rsquo; olarak kullanmak için Laravel Model içerisine $table değişkeni belirtmeniz gerekli.</p>\n\n<pre>\n<code class=\"language-php\">protected $table = 'sayfalar';</code></pre>\n\n<p>Yine aynı şekilde Primary Key olarak id kullanmayacaksanız eğer onu da,</p>\n\n<pre>\n<code class=\"language-php\">protected $primaryKey = 'sayfa_id';</code></pre>\n\n<p>olarak belirtmeniz gerekli.</p>\n\n<p>Yukarıda bahsettiğim gibi bu yazıda Migration yapısını anlatmayacağım fakat Migration kullanarak oluşturulan tablolarda timestamps değişkeni vardır. Bu değişken tablonuza &lsquo;created_at&rsquo; ve &lsquo;updated_at&rsquo; kolonları ekler. Biz manuel oluşturduğumuz tablomuza bunları eklemediğimiz için Model yapımıza bunları tabloda aramaması gerektiğini söylememiz gerek. Yoksa Model hata oluşturacaktır. Bunun için,</p>\n\n<pre>\n<code class=\"language-php\">public $timestamps = false;</code></pre>\n\n<p>satırı Model içerisine eklememiz gereklidir.</p>\n\n<p>Laravel Model yapısında hangi kolonun yazılabilir olduğu sizin tarafınızdan mutlaka belirtilmelidir. Yukarıdaki örnek tablomuzda &lsquo;aktif&rsquo; kolonunun değiştirilmesini istemediğimizi düşünürsek bunun için Model içerisine</p>\n\n<pre>\n<code class=\"language-php\">protected $fillable = ['baslik','icerik'];</code></pre>\n\n<p>Burada gördüğünüz gibi &lsquo;aktif&rsquo; ve &lsquo;id&rsquo; kolonlarımız yok. Bunların olmaması Laravel sistemine bunların manipüle edilmemesi gerektiği, korunması gerektiğini belirtir. Yani buraya yazmadığımız kolonlar Controller ile değiştirilemez. Laravel için bu bir çeşit güvenlik önlemidir ve bu önlem Mass Assignment olarak adlandırılır.</p>\n\n<p>Eğer biz tüm alanların değiştirilebilir olmasını istiyorsak ya da sadece &lsquo;id&rsquo; kolonunun korunmasını istiyorsak ve tablomuzda 30 adet kolon varsa bunu tek tek yazmamız mı gerekecek? Tabi ki hayır. Sürekli bizim iyiliğimizi düşünen Laravel bunun içinde çözüm oluşturmuş &lsquo;guarded&rsquo;.</p>\n\n<pre>\n<code class=\"language-php\">protected $guarded = [];\nya da\nprotected $guarded = ['id'];</code></pre>\n\n<p>Bu şekilde belirttiğimiz kolonlar harici olanların hepsinin değiştirilebilir olduğunu belirtmiş oluyoruz.</p>\n\n<p>Son olarak yukarıdaki kod satırlarının Model içerisindeki yerleşimi aşağıda yer alan resimdeki gibi olmalıdır.</p>\n\n<p><img alt=\"laravel model son hali\" src=\"/assets/fileman/Uploads/laravel-model-son.jpg\" style=\"height:346px; width:700px\" /></p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,composer,framework,oop,model",
        "aktif": "1",
        "sira": "9",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da759",
        "baslik": "Laravel Raw SQL Queries",
        "url": "laravel-raw-sql-queries",
        "icerik": "<h2><strong>Laravel Raw SQL Queries Nedir?</strong></h2>\n\n<p>Laravel Raw Sql Queries aslında laravel sisteminde standart sql söz dizilimi yazmanızı sağlayan bir sistemdir. Laravel içerisinde daha sonraki derslerimde anlatacağım Eloquent sisteminden farklı olarak burada düz php yazılımından alışık olduğunuz sorguları yazabilmenizi sağlar. Aralarındaki en önemli fark ise büyük verilerde hızdır. Raw SQL Queries, Eloquent yazımıda göre daha hızlı çalışmaktadır. O yüzden büyük verili sistemlerde raw kullanmak performans açısından olumlu olacaktır.</p>\n\n<pre>\n<code class=\"language-php\">use Illuminate\\Support\\Facades\\DB;</code></pre>\n\n<p>satırını eklememiz gerek. Bu sayede yazdığımız sql öbekleri Laravel tarafından işlenecektir.Şimdi Laravel Raw SQL Queries ile ilgili örnek sorgular yazalım.</p>\n\n<p><strong>Laravel Raw SQL Queries select</strong></p>\n\n<p>Select sorgusunu için PageController dosyasındaki index() fonksiyonunda kullanalım.</p>\n\n<pre>\n<code class=\"language-php\">public function index(){\n    $pages = DB::select('select * from pages where aktif= ?', [1]);    \n    $pages = DB::select('select * from pages where aktif= :aktif',['aktif' = 1]);\n}</code></pre>\n\n<p>Burada ikisi de aynı işlemi yapan satırlar var. Bunlardan birisini kullanmanız yeterli olacaktır. Ben sizi kullanım şeklini göstermek için aynı işlemi yapan iki ayrı satır ekledim.</p>\n\n<p><img alt=\"Laravel raw sql queries\" src=\"/assets/fileman/Uploads/laravel-controller-r.jpg\" style=\"height:719px; width:750px\" /></p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,sql,mvc,oop,framework",
        "aktif": "1",
        "sira": "8",
        "created_at": "11/6/2020 18:38:54",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "baslik": "Laravel Query Builder",
        "url": "laravel-query-builder",
        "icerik": "<p>özelleştirilmiş bir standart SQL olarak düşünebiliriz. Model dosyası olmayan tablolar için bu sistemi kullanabiliriz. Bir önceki yazımızda bahsettiğimiz Raw SQL Queries yapısından farklı olarak daha düzenli kod yazılması ve bazı işlemlerin daha akıcı şekilde yazılabilmesini sağlar.</p>\n\n<p>Bir önceki yazımızda oluşturduğumuz Page Controller dosyasını kullanalım. önceki yazımızda yer alan Page Controller dosyasımızı hatırlamak için ekleyelim.</p>\n\n<p><img alt=\"Laravel raw sql queries\" src=\"/assets/fileman/Uploads/Laravel-raw-sql-queries-1024x543.jpg\" style=\"height:398px; width:750px\" /></p>\n\n<p>Yukarıda yer alan görseldeki kodlarımızı bir de Query Builder ile yapalım.</p>\n\n<p><img alt=\"laravel query builder\" src=\"/assets/fileman/Uploads/laravel-query-builder-1024x695.jpg\" style=\"height:509px; width:750px\" /></p>\n\n<p>Tıpkı Laravel Raw SQL Queries için olduğu gibi Laravel Query Builder kullanmak için de controller dosyasından üst bölümüne &lsquo;DB&rsquo; methodunu çağırmamız gerek. Bunun için &lsquo;namespace&rsquo; satırının altına</p>\n\n<pre>\n<code class=\"language-php\">use Illuminate\\Support\\Facades\\DB;</code></pre>\n\n<p>satırını eklememiz gerek. Bu sayede yazdığımız sql öbekleri Laravel tarafından işlenecektir.</p>\n\n<p>Laravel Query Builder bizim için bir çok kolaylığı beraberinde getiriyor. Mesela çoklu insert işlemi yapabiliyoruz.</p>\n\n<pre>\n<code class=\"language-php\">DB::table('pages')-&gt;insert([\n    [\"baslik\" =&gt; \"Laravel Raw SQL Queries\", \"icerik\" =&gt; \"Laravel Raw SQL Queries ekleme işlemlerini yaptık\", \"aktif\" =&gt; 1]\n    [\"baslik\" =&gt; \"Laravel Query Builder\", \"icerik\" =&gt; \"Laravel Query Builder ekleme işlemlerini yaptık\", \"aktif\" =&gt; 1]\n]);</code></pre>\n\n<p>Yukarıda görüldüğü gibi iki insert işlemini tek bir Query ile yapabiliyoruz.</p>\n\n<p><strong>Laravel Query Builder Where Kullanımı</strong></p>\n\n<p>Bu yapıda where kullanımı oldukça gelişmiştir. Bu tanım iki ya da üç değişiken ile kullanılabiliyor. Bunu şu şekilde açıklayabiliriz. Eğer iki değişkenli bir tanım kullanılacak ise örneğin</p>\n\n<pre>\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', 1)-&gt;get();</code></pre>\n\n<p>Bu kod satırının açıklaması standart bir SQL ile şöyle açıklanabilir;</p>\n\n<pre>\n<code class=\"language-php\">select * from pages where aktif=1;</code></pre>\n\n<p>Toparlayacak olursak eğer iki değişkenli bir where ifadesi kullanmak isterseniz bu eşitlik anlamı taşır. Fakat eşitlik hariç her durum için üçünkü bir değişken kullanmalıyız.</p>\n\n<pre>\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', '!=', 1)-&gt;get();\n\nbunun sql karşılığı ise\n\nselect * from pages where aktif!=1;</code></pre>\n\n<p>Aynı şekilde birden fazla where ifadesi kullanabiliriz. Bunun için ifadeleri peşpeşe eklememiz yeterli.</p>\n\n<pre>\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', 1)-&gt;where('baslik','LIKE', '%Laravel%')-&gt;orWhere('icerik','')-&gt;get();</code></pre>\n\n<p>Yazdığımız bu kod satırı ile iki adet where ve bir adet orWhere ifadesi kullandık. Bunu SQL kodu olarak yazmak istersek aşağıdaki gibi bir kod yazabiliriz.</p>\n\n<pre>\n<code class=\"language-php\">select * from pages where aktif = 1 and baslik Like '%Laravel%' or icerik = '';</code></pre>\n\n<p></p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,oop,sql,query-builder",
        "aktif": "1",
        "sira": "7",
        "created_at": "11/6/2020 18:38:55",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da761",
        "baslik": "Laravel Eloquent CRUD İşlemleri",
        "url": "laravel-eloquent-crud-islemleri",
        "icerik": "<h2>Laravel<strong>Eloquent</strong>Nedir?</h2>\n\n<p>Laravel yapısının veritabanı işlemlerini model aracılığı ile kolayca yapmanızı sağlayan bileşenidir. Bu sayede özellikle bir sonraki yazımızda işleyeceğimiz tablolar arası ilişki sistemini kolayca kurabilirsiniz.</p>\n\n<p>Hemen ilk değişikliğimiz Laravel Raw SQL Queries ve Laravel Query Builder kullanırken ihtiyacımız olan &lsquo;<strong>DB</strong>&rsquo; methodunu kaldırıp yerine Laravel Eloquent için gerekli olan modelimizi eklemek oldu. Bunun için &lsquo;<strong>namespace</strong>&rsquo; satırının altına</p>\n\n<pre>\n<code class=\"language-php\">use App\\Page;</code></pre>\n\n<p>satırını ekleyerek yapmamız gerek. Tabi bir &lsquo;pages&rsquo; tablosunu kullanacağımız için &lsquo;Page&rsquo; modelini ekledik.</p>\n\n<p>Laravel Eloquent oldukça anlaşılır ve takip edilebilir bir sistemdir. Mesela yeni bir veri eklemek için</p>\n\n<pre>\n<code class=\"language-php\">$page = new Page;\n$page-&gt;baslik = \"Laravel Eloquent\";\n$page-&gt;icerik = \"Laravel Eloquent ekleme işlemlerini yaptık\";\n$page-&gt;aktif = 1;\n$page-&gt;save();</code></pre>\n\n<p>yapmamız yeterli burada sol bölümdeki -&gt; sonra gelenlerin tablodaki kolon isimleri olduğuna dikkat etmemiz gerek.</p>\n\n<p>Ayrıca tüm veriyi almak için de oldukça basit olan</p>\n\n<pre>\n<code class=\"language-php\">$pages = Page::all();</code></pre>\n\n<p>satırını kullanmamız yeterli olacaktır.</p>\n\n<p><strong>Laravel Eloquent Where Kullanımı</strong></p>\n\n<p>Bu yapıda aynı Query Builder gibi where kullanımı oldukça gelişmiştir. Bu tanım iki ya da üç değişiken ile kullanılabiliyor. Bunu şu şekilde açıklayabiliriz. Eğer iki değişkenli bir tanım kullanılacak ise örneğin</p>\n\n<pre>\n<code class=\"language-php\">Page::where('aktif', 1)-&gt;get();</code></pre>\n\n<p>Eğer iki değişkenli bir where ifadesi kullanırsanız bu eşitlik anlamı taşır. Eşitlik harici durumlar için ise üç değişkenli where kullanmalısınız</p>\n\n<pre>\n<code class=\"language-php\">Page::where('aktif', '!=', 1)-&gt;get();</code></pre>\n\n<p>bunun sql karşılığı ise,</p>\n\n<pre>\n<code class=\"language-sql\">select * from pages where aktif!=1;</code></pre>\n\n<p>Gördüğünüz gibi aslında Query Builder da yer alan tablo odaklamasını bizim yerimize Laravel Eloquent model yapısını kullanarak yapmaktadır.</p>\n",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,crud,mvc,oop,framework",
        "aktif": "1",
        "sira": "4",
        "created_at": "11/6/2020 18:38:55",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da762",
        "baslik": "Laravel Eloquent One to One",
        "url": "laravel-eloquent-one-to-one",
        "icerik": "<p><strong>one-to-one relationship</strong>ilişki tasarımının temelidir. örneğin, Kullanıcı modelinin sadece bir adet banka hesabı olduğunu düşünürsek sadece hesap numarasına ihtiyacı var. Böylece Kullanıcı ve Banka modelini <strong>one to one relationship</strong>olarak yapabiliriz.</p>\r\n\r\n<p>User modeli,</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function hesap(){\r\n   return $this-&gt;hasOne('App\\Banka');\r\n}</code></pre>\r\n\r\n<p>Banka modeli,</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function user(){\r\n    return $this-&gt;belongsTo('App\\User');\r\n}</code></pre>\r\n\r\n<p>Kullanıcı modelini kullanarak kullanıcının hesap modelinden verileri aşağıdaki gibi çekebiliriz.</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find(1)-&gt;hesap;</code></pre>\r\n\r\n<p></p>",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,oop,framework",
        "aktif": "1",
        "sira": "6",
        "created_at": "11/6/2020 18:38:55",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da763",
        "baslik": "Laravel Eloquent One to Many",
        "url": "laravel-eloquent-one-to-many",
        "icerik": "<p>One To Many ilişkisi, hasMany ilişkisi olarakta bilinir ve bir tablodaki bir kayıdın diğer tablodaki birden çok kayıt ile ilişkisini tanımlar. Laravel Eloquent&#39;de, bir modelin birden fazla model ile bağı olabilir. örnek olarak, Blog sisteminde bir kategorinin birden fazla yazısı olabilir.</p>\r\n\r\n<p>Yazı modeli;</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Yazi extends Model{\r\n    public function kategori(){\r\n        return $this-&gt;belongsTo('App\\Kategori');\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>Kategori modeli,</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Kategori extends Model{\r\n    public function yazilar()    {\r\n        return $this-&gt;hasMany('App\\Yazi');\r\n    }\r\n}</code></pre>\r\n\r\n<p>şeklinde ilişki tanımlanabilir. Bu ilişkide kategori modelinde birden fazla yazı ilişkili olduğu için, yazı modelinde her yazının sadece bir adet kategorisi bulunduğunu gösterdik. Aşağıdaki kod bloğu ise veri tabanına oluşturduğumuz dummy verileri arasındaki ilişkiyi gösterecek,</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function index(){\r\n        $yazilar = Yazi::with('kategori')-&gt;get();\r\n        return $ayzilar;\r\n}</code></pre>\r\n\r\n<p></p>",
        "kategori_id": "2ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "laravel,php,mvc,oop,relation,sql,db",
        "aktif": "1",
        "sira": "5",
        "created_at": "11/6/2020 18:38:55",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da764",
        "baslik": "PHP 6'ya Ne Oldu?",
        "url": "php-6ya-ne-oldu",
        "icerik": "<h2>PHP 6 için plan neydi?</h2>\r\n\r\n<ul>\r\n\t<li>PHP 6, PHP&#39;ye yerel unicode desteği eklenmesi bekleniyordu.</li>\r\n\t<li>Bu büyük bir değişikliği temsil etti ve birçok özelliğin PHP 5.x kod tabanına eklenmesi engellendi çünkü ilk önce unicode desteğinin eklenmesi gerekiyordu.</li>\r\n\t<li>Unicode desteğinin uygulanmasına yönelik kayda değer ilerleme sağlanmış ancak işlem uzun sürmüştü.\r\n\t<ul>\r\n\t\t<li><a href=\"http://www.php.net/~scoates/unicode/render_func_data.php\" target=\"_blank\">PHP 6 Unicode dönüşümü 2006 yılında% 4,5 olarak gerçekleşti.</a>.</li>\r\n\t\t<li><a href=\"http://web.archive.org/web/20110819115549/http://www.php.net/~scoates/unicode/render_func_data.php\" target=\"_blank\">PHP 6 Unicode dönüşümü 2011 yılında ~% 70 idi.</a>.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Sonunda PHP 6 için tasarlanan yeni özelliklerin çoğu PHP 5.x dalına desteklendi.</li>\r\n\t<li>PHP 6, sadece karakter kodlamasından daha geniş bir odağa sahipti.</li>\r\n</ul>\r\n\r\n<h2>PHP 6&#39;nın çöküşünün mirası nedir?</h2>\r\n\r\n<ul>\r\n\t<li>Dizeler sabitleri PHP&#39;de hala temel olarak baytlardan oluşur.</li>\r\n\t<li><a href=\"http://php.net/manual/en/book.mbstring.php\" target=\"_blank\">mbstring</a>,<a href=\"http://php.net/manual/en/book.iconv.php\" target=\"_blank\">iconv</a>,<a href=\"http://php.net/manual/en/class.uconverter.php\" target=\"_blank\">uconverter</a>, vb.Kullanarak karakter kodlama sorunları ile başa çıkmak geliştiricilere kalmıştı.</li>\r\n\t<li><a href=\"http://php.net/manual/en/book.intl.php\" target=\"_blank\">intl uzantıs</a>PHP 5.x/7.x.&#39;de bir çok özellikte kullanılmasıiçin başlangıçta PHP6&#39;nın bir parçası olması düşünüldü.</li>\r\n\t<li>PHP 5&rsquo;te UTF-8 ile çalışmak acı verici olabilir. Bazen onaltılık gösterimi kullanarak UTF-8 karakterleri belirtmemiz gerekir.</li>\r\n\t<li>PHP 7 satır içinde UTF-8 literal syntax <code>\\u{[0-9A-Fa-f]+}</code>ve<a href=\"http://php.net/manual/en/class.intlchar.php\" target=\"_blank\">IntlChar class</a>fonksiyonlarını eklemeye yardımcı olur.</li>\r\n</ul>\r\n\r\n<h2>Yanlış giden neydi?</h2>\r\n\r\n<ul>\r\n\t<li>UTF-16&#39;yı dahili olarak kullanma kararı, sürecin başlarında (2005) verildi.</li>\r\n\t<li>PHP 6&#39;daki iş başlangıcında UTF-8 yaygın olarak desteklenmiyordu, ancak geliştirme sırasında endüstri bu konuda standartlaşmaya başladı.</li>\r\n\t<li>Bu yaygın kodlamanın benimsenmesi,PHP 6&#39;nın hedefleri çözmeye ve hedefleri daha az ilgili hale getirmeye çalıştığı sorunların çoğuna yardımcı oldu.</li>\r\n\t<li>Sorunu tam olarak anlayan katkı yapanların sayısı göreceli olarak düşüktü ve sıkıcı dönüşüm çalışmasının miktarı çok fazlaydı.Açık kaynakta, insanlar ilgilendikleri şey üzerinde çalışırlar ve yeterince ilgilenmiyorlardı.</li>\r\n\t<li>UTF-16 kullanarak tam unicode desteği performansı olumsuz etkiledi.</li>\r\n\t<li>2009/2010 itibariyle PHP 6&#39;nın asla olmayacağı belli oldu.</li>\r\n</ul>\r\n\r\n<h2>PHP 6&#39;dan ne öğrenebiliriz?</h2>\r\n\r\n<ul>\r\n\t<li>PHP 6 başarısız olmadı: <a href=\"http://php.net/manual/en/book.intl.php\" target=\"_blank\">intl uzantısı</a> ve şu anda dilin bir parçası olan diğer özellikleri 5.x ve 7&#39;de ortaya koydu.</li>\r\n</ul>",
        "kategori_id": "1ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "php,php6",
        "aktif": "1",
        "sira": "3",
        "created_at": "11/6/2020 18:38:55",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da765",
        "baslik": "Node Package Manager (npm)",
        "url": "node-package-manager-npm",
        "icerik": "<h1><strong><span style=\"font-size:18px\">Paket yönetimi nedir?</span></strong></h1>\n\n<blockquote>\n<p>Paket yöneticisi, programınızın tam olarak çalışması için gereken harici modülleri yönetmenize yardımcı olur.</p>\n</blockquote>\n\n<p>Temel olarak, bir paket yöneticisi, girdiğiniz özel komutları izleyerek sizin veya mevcut projenizdeki başka biri tarafından yazılan harici kod parçalarını eklemenize, kaldırmanıza veya güncellemenize yardımcı olur. Böylece bir paket yöneticisi, komut istemcisiyle gönderilen komutları izleyerek kayıt defteri adı verilen bir veritabanından programınıza bağımlılıklar ekleyebilir. Bu komut istemcisini kullanarak bağımlılıkları da kaldırabilir ve güncelleyebilirsiniz. Komut istemcisi, paket yöneticisine verdiğiniz talimatlardan önce gelen bir anahtar kelimedir.</p>\n\n<blockquote>\n<p>Bir paket yöneticisinin diğer bir önemi de, programınızı dünyanın herhangi bir yerinde kullanmaya çalışan herkesin sizinle aynı ortamla çalışmasını sağlamak için sürüm de dahil olmak üzere programınıza eklediğiniz her paketi takip etmesidir. Bu, yazılım oluştururken &ldquo;Bilgisayarımda çalışır&rdquo; mazeretini büyük ölçüde önler.</p>\n</blockquote>\n\n<p>Farklı programlama dilleri için farklı paket yöneticisi türleri vardır. JavaScript için en popüler olanları <strong>npm </strong>ve <strong>yarn</strong>&#39;dır.</p>\n\n<h2><strong>npm</strong></h2>\n\n<p>NodeJS için varsayılan paket yöneticisidir. NodeJS yükleyicisi ile birlikte gelir ve NodeJS&#39;i yükledikten sonra ona erişebilirsiniz. npm komut istemcisi npm olarak adlandırılır ve paketleri <strong><em>npm registry</em></strong> adı verilen çevrimiçi bir veritabanında depolar.</p>\n\n<p>Bir terminal penceresi veya Komut İstemi açın ve klasör konumunuza gidin:</p>\n\n<pre>\n<code class=\"language-bash\">cd C:\\anil\\npm-klasor</code></pre>\n\n<p>Şimdi npm&#39;yi başlatma zamanı. Başlamak için, komut istemcisini (npm) kullanarak bir komut çalıştırmamız gerekir. Projenizde npm çalıştırmak için bu komutu çalıştırın. (-y default parametleri seçerek devam eder)</p>\n\n<pre>\n<code class=\"language-bash\">npm init -y</code></pre>\n\n<p>Tamamlandığındaproje klasörünüzü kontrol edin ve bir package.json dosyası bulacaksınız.</p>\n\n<h2><strong>Peki package.json nedir?</strong></h2>\n\n<p>Package.json, projenizin meta verilerini depolamak da dahil olmak üzere birçok şey yapar, ayrıca projenizde kullanılan her bağımlılığı ve komut dosyalarını içerir. Komut dosyaları, projenizdeki yinelenen görevleri otomatikleştirmeye yardımcı olan komutlardır. örneğin, bir Nodejs dosyasını çalıştırmak için şunları kullanabilirsiniz:</p>\n\n<pre>\n<code class=\"language-bash\">node dosya-ismi.js</code></pre>\n\n<p>Ancak, daha fazla bağımlılık eklediğinizde, bu komut yazmak daha uzun ve hantal hale gelebilir, bu nedenle komutu package.json dosyanızdaki komut dosyası alanına ekleyebilirsiniz.</p>\n\n<pre>\n<code class=\"language-json\">\"scripts\": {\"start\": \"node --uzun-komutları-buraya-koyalım dosya-ismi.js\"},</code></pre>\n\n<p>Bu komutu çalıştırmak için, yalnızca terminalinizde aşağıdaki komutu çalıştırmanız gerekir.</p>\n\n<pre>\n<code class=\"language-bash\">npm run start</code></pre>\n\n<p>İlk npm paketimiz <a href=\"https://www.npmjs.com/package/chalk\" rel=\"noopener nofollow\" target=\"_blank\">Chalk</a>&#39;i kuralım. Chalk, terminalinize farklı renklerde yazmanızı sağlar. Bir index.js dosyası oluşturun ve bu komutu terminalde çalıştırın.</p>\n\n<pre>\n<code class=\"language-bash\">npm install chalk@3.0.0</code></pre>\n\n<blockquote>\n<p>install yerine kısace i&#39;de kullanılabilir.</p>\n\n<p>npm i&lt;package-name&gt; npm paketlerini kurma komutudur. Kodu çalıştıran her bilgisayarın aynı paketlerin aynı sürümlerini kullanarak çalışmasını sağlamak için sürüm eklenir (npm install &lt;package-name&gt; @ &lt;package-version&gt;).</p>\n</blockquote>\n\n<p>Şimdi package.json dosyanızda, dependencies adı verilen yeni bir alan olacak. Eklediğiniz her paket sürümüyle birlikte buraya kaydedilir.</p>\n\n<p>Programınıza yüklediğiniz her paketin ayrıntılarını içeren bir <strong>package-lock.json </strong>dosyası da oluşturulur. Bu, diğer insanlar programınızı çalıştırdığında çevrede bir tür üniformluk sağlar ve en azından dış bağımlılık olmasını engeller.</p>\n\n<p>Ayrıca<strong><em>node_modules</em></strong>klasörü de oluşturulur. Bu klasör npm ile kurulan harici dependencies&#39;leri saklar. Npm&#39;nin güzelliği, projenizi paylaştığınızda veya başka bir bilgisayarda kullanmak üzere çevrimiçi bir depoya yüklediğinizde node_modules klasörünü paylaşmanız gerekmemesidir. Package.json ve package-lock.json dosyası mevcutsa, yalnızca aşağıdaki komutu çalıştırmanız gerekir ve package.json dosyanızda bulunan her harici bağımlılık projenize kullanım için eklenir.</p>\n\n<pre>\n<code class=\"language-bash\">npm install</code></pre>\n\n<p>Yani index.js dosyasına geri dönelim. Chalk dependency&#39;i kullanalım İlk olarak, bağımlılığı çalışma klasörümüze aktarıyoruz:</p>\n\n<pre>\n<code class=\"language-javascript\">const chalk = require('chalk')</code></pre>\n\n<p>Ve şimdi dosyamızda istediğimiz şekilde kullanabiliriz:</p>\n\n<pre>\n<code class=\"language-javascript\">console.log(chalk.green(\"Yeşil\") +chalk.italic.yellow(\"Sarı Eğri\") +chalk.bold.red(\"Kırmızı Kalın\"));</code></pre>\n\n<p>Dosyamızı çalıştırmak için, ilk olarak, package.json klasöründeki komut dosyasına başlamayı ekleriz</p>\n\n<pre>\n<code class=\"language-json\">\"scripts\": {\"start\": \"node index.js\",\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"},</code></pre>\n\n<p>Ve sonra terminalde koşuyoruz</p>\n\n<pre>\n<code class=\"language-bash\">npm run start</code></pre>\n\n<h2>Tamamlama</h2>\n\n<p>Npm&#39;nin otomatik tamamlamayı desteklediğini biliyor muydunuz? Bir terminalde npm tamamlamayı çalıştırın ve bir bash tamamlama komut dosyası çıktısını verecektir. Eğer <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a> gibi hazır bir komut satırı çerçevesi kullanırsanız, bu sizin için halledilebilir. Ancak değilse, bu komut dosyasını .bashrc (veya benzeri) cihazınıza eklemek tek ihtiyacınız olan şeydir. CLI sayesinde oldukça basit.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm completion &gt;&gt; ~/.bashrc\n</code></pre>\n\n<h2>Start</h2>\n\n<p>Başlangıç komutunun daha az bilinen bir yönü, package.json içinde bir başlangıç komut dosyasının tanımlanmasını gerektirmemesidir. npm başlangıçta Node.js projeleri düşünülerek tasarlandı. Sonuçta, npm <em>node package manager</em>kısaltmasıdır. Bu nedenle, varsayılan olarak start&#39;ın projenizin kök dizininde bir server.js dosyası çalıştırması şaşırtıcı değildir.</p>\n\n<h2>Explore</h2>\n\n<p><code>node_modules</code>paketlere karşı npm komutlarını <code>explore</code>komutunu çağırarak çalıştırabilirsiniz. örneğin, bir paketin hangi sürümünü yüklediğinizi doğrulayabilirsiniz</p>\n\n<pre>\n<code class=\"language-bash\">$ npm explore typescript -- npm version\n\n//çıktı\n//{ typescript: '3.6.2', ... }</code></pre>\n\n<h2>Edit</h2>\n\n<p>Bir paketin içeriğini incelemek veya değiştirmek istiyorsanız <code>edit</code>komutunu kullanabilirsiniz.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm edit globby\n</code></pre>\n\n<h2>View</h2>\n\n<p>View komutuyla en son (veya herhangi bir) paket bilgisini alabilirsiniz.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm view react\n\n# output\nreact@16.9.0 | MIT | deps: 3 | versions: 218\nReact is a JavaScript library for building user interfaces.\n[https://reactjs.org/](https://reactjs.org/)\ndist\n.tarball:[ https://registry...react-16.9.0.tgz](https://registry...react-16.9.0.tgz)\n.shasum: 40ba2f...85c4f7aa\n.integrity: sha512-+7LQn...e66S1w==\n.unpackedSize: 232.7 kB\nmaintainers:\n- acdlite\n- brianvaughn\n- gaearon\n- etc\ndist-tags:\nalpha: 16.9.0-alpha.0\ncanary: 0.0.0-8d5403877\nlatest: 16.9.0\nnext: 16.9.0\nunstable: 0.0.0-0c756fb-f7f79fd\npublished a month ago by acdlite</code></pre>\n\n<h2>Repo</h2>\n\n<p>Bir sorunu açabilmek veya tatlı bir katkıda bulunabilmek için bir paketin repo&#39;sunu açar.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm repo webpack</code></pre>\n\n<h2>Docs</h2>\n\n<p>Docs komutu <code>repo</code>&#39;ya benzer şekilde çalışır, ancak bir paket için standart dokümantasyon sitesini bulmak için en iyisidir.</p>\n\n<pre>\n<code class=\"language-bash\">npm docs react\n</code></pre>\n\n<h2>Shorthands and Flags</h2>\n\n<p><code>npm i</code>&#39;nin <code>npm install&#39;ı</code>karşılaması gibi, test için de başka fonetik stenograflar vardır.</p>\n\n<ul>\n\t<li><code>npm i</code>- install</li>\n\t<li><code>npm t</code>- test</li>\n\t<li><code>npm it</code>- install and run tests</li>\n\t<li><code>npm ci</code>- clean-install</li>\n\t<li><code>npm cit</code>- clean-install and run tests</li>\n</ul>\n\n<p><a href=\"https://docs.npmjs.com/\">npm</a> belgelerini okursanız, çeşitli komutlar için birçok seçenek keşfedeceksiniz.</p>\n\n<ul>\n\t<li><code>npm init -y</code>(<code>--yes</code>, kısaltmasıdır)</li>\n\t<li><code>npm install -D</code>(<code>--save-dev</code>kısaltmasıdır)</li>\n\t<li><code>npm install -E</code>(-<code>-save-exact</code>kısaltmasıdır)</li>\n\t<li><code>npm run &lt;script&gt; --if-present</code>(bu, verilen komut dosyasını yalnızca varsa çalıştırır. Bilinmeyen bir paket grubuna karşı bir paket komut dosyası çalıştırmak istiyorsanız kullanışlıdır)</li>\n</ul>\n\n<h2>Version</h2>\n\n<p>Publishing&#39;deyeniyseniz, paket sürümlerini kendiniz artırdığınızı görebilirsiniz. Bunu yapmak zorunda değilsiniz. <code>version</code>komutu sizin için tüm çarpmaları kaldırabilir.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm version patch\n</code></pre>\n\n<p>Bu, package.json dosyasındaki patch sürümünü artırır. Ancak, paket kilidinizdeki sürümü de güncelleyecek, tümünü işleyecek ve bir etiket oluşturacaktır.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm version premajor --preid alpha\n</code></pre>\n\n<p>Given a starting version of<code>0.1.0</code>, the above command will result in a version of<code>1.0.0-alpha.0</code>. The<code>--preid</code>argument is optional. Without it, you would get version<code>1.0.0-0</code>. Note: Identifiers can only contain ASCII alphanumerics and hyphen [0-9A-Za-z-].</p>\n\n<h2>Pack</h2>\n\n<p>Paketinizin kayıt defterine yayınlanacağı gibi bir tarball oluşturmak için pack komutunu kullanın.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm pack\n\n# output\nnpm notice\nnpm notice 📦 my-awesome-package@1.0.0\nnpm notice === Tarball Contents ===\nnpm notice 436B  dist/main.js\nnpm notice 1.7kB package.json\nnpm notice 246B  README.md\nnpm notice 581B  CHANGELOG.md\nnpm notice === Tarball Details ===\nnpm notice name:          my-awesome-package\nnpm notice version:       1.0.0\nnpm notice filename:      my-awesome-package-1.0.0.tgz\nnpm notice package size:  1.1 kB\nnpm notice unpacked size: 2.8 kB\nnpm notice shasum:        2830767a6...4ac5d78d64\nnpm notice integrity:     sha512-1L...YN4uFX9Q==\nnpm notice total files:   4\n</code></pre>\n\n<p>Neler aldığınızı görmek için doğrudan yerel bir tarball&#39;dan kurabilirsiniz.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm i my-awesome-package-1.0.0.tgz</code></pre>\n\n<h2>Link</h2>\n\n<p>Yerel bir paket kurmanız ve tüketen bir uygulamadan tekrarlamanız gerekirse ne olur? <code>node_modules</code>deki bir paketten bahsedilen paketin yerel bir sürümüne bir sembolik bağlantı oluşturur. Link komutu, kaynak paketten mi yoksa tüketen bir uygulamadan mı çalıştırdığınıza bağlı olarak iki farklı şekilde çalışır.</p>\n\n<p>Yerel bir paketi bağlamak için, önce kaynak paketin kök dizininde argüman olmadan npm bağlantısını çalıştırın. Ardından, uygulamanın kök dizininde <code>npm link &lt;package-name&gt;</code> bağlantısını çalıştırın. Şimdi ikisi arasında bir sembolik bağlantısı olacak ve kaynak paketteki güncellemeler otomatik olarak node_modules&#39;e yansıtılacak.</p>\n\n<h2>Publish</h2>\n\n<p>Yayın öncesi sürümleri yayınlarken bunları etiketlemek yararlıdır. Bu, tüketicilere kurulumlarını kolaylaştırır.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm publish --tag next\n</code></pre>\n\n<h2>Deprecate</h2>\n\n<p>Paket tüketicilere kullanımdan kaldırılanları bildirmek istiyorsanız <code>deprecate</code>kullanabilirsiniz. Komut, özelliklerin iletişimine yardımcı olabilecek isteğe bağlı bir ileti alır. Kullanımdan kaldırılmış bir paket yükleyen kullanıcılara bir bildirim görüntülenir.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm deprecate my-awesome-package@1.0.0 \"please use 1.0.1\"</code></pre>\n\n<h2>Bonus</h2>\n\n<p>npm nerede olduğunu bilir. Farklı senaryolarda yararlanmak isteyebileceğiniz önemli yolları çıktılamak için komutlar vardır.</p>\n\n<ul>\n\t<li><code>npm prefix</code>- bir package.json dosyası veya <code>node_modules</code>dizinini içerecek en yakın üst dizine gider. Genellikle projenizin kökü.</li>\n\t<li><code>npm bin</code>- <code>./node_modules/.bin</code> olarak çözümlenir. Burada yerel olarak kurulan paketler için yürütülebilir dosyalar tutulur.</li>\n\t<li><code>npm root</code>- etkin <code>node_modules</code>dizini</li>\n</ul>\n\n<p>Bunlardan herhangi birine genel bayrak ekleyin ve npm&#39;in global olarak kurulu sürümünüze uygulanan yolları okuyabilirsiniz.</p>\n\n<pre>\n<code class=\"language-bash\">$ npm prefix -g\n\n/usr/local\n</code></pre>\n\n<pre>\n<code class=\"language-bash\">$ npm bin -g\n\n/usr/local/bin\n</code></pre>\n\n<pre>\n<code class=\"language-bash\">$ npm root -g\n\n/usr/local/lib/node_modules\n</code></pre>\n\n<p>npm&#39;nin bir doktor komutu var. Aşağıdakileri teyit edecektir:</p>\n\n<ul>\n\t<li>Node.js ve git npm tarafından yürütülebilir.</li>\n\t<li>Birincil npm kayıt defteri kullanılabilir.</li>\n\t<li>Npm tarafından kullanılan dizinler vardır ve geçerli kullanıcı tarafından yazılabilir.</li>\n\t<li>Npm önbelleği var.</li>\n</ul>\n\n<p></p>\n",
        "kategori_id": "3ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "",
        "aktif": "1",
        "sira": "2",
        "created_at": "11/6/2020 21:03:10",
        "updated_at": "12/6/2020 19:16:23"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da766",
        "baslik": "Axios ile HTTP istekleri",
        "url": "axios-ile-http-istekleri",
        "icerik": "<p>Axios, hem Tarayıcı hem de Node.js platformlarında çalışan HTTP isteklerini gerçekleştirmek için kullanabileceğiniz çok popüler bir JavaScript kütüphanesidir. IE8 ve sonraki sürümleri de içeren tüm modern tarayıcıları destekler. Promise tabanlıdır ve bu, XHR isteklerini çok kolay bir şekilde gerçekleştirmek için async/await kod yazmamızı sağlar. Axios kullanmanın yerel Fetch API&#39;sine göre birkaç avantajı vardır:</p>\n\n<ul>\n\t<li>Eski tarayıcıları destekler</li>\n\t<li>Bir isteği iptal etmenin bir yolu var</li>\n\t<li>Response timeout&#39;u ayarlamak için bir yolu vardır</li>\n\t<li>CSRF korumasına sahiptir</li>\n\t<li>Yükleme ilerlemesini destekler</li>\n\t<li>Otomatik JSON veri dönüşümü gerçekleştirir</li>\n\t<li>Node.js&#39;de çalışır</li>\n</ul>\n\n<h2>Kurulum</h2>\n\n<p>Axios npm kullanılarak kurulabilir:</p>\n\n<pre>\n<code class=\"language-bash\">npm install axios\n// yada\nyarn add axios</code></pre>\n\n<p>veya unpkg.com&#39;u kullanarak sayfanıza ekleyin:</p>\n\n<pre>\n<code class=\"language-html\">&lt;script src = \"https://unpkg.com/axios/dist/axios.min.js\"&gt; &lt;/script&gt;</code></pre>\n\n<h2>The Axios API</h2>\n\n<p>Bir HTTP isteğini axios nesnesinden başlatabilirsiniz:</p>\n\n<pre>\n<code class=\"language-javascript\">axios({\n  url: 'https://dog.ceo/api/breeds/list/all',\n  method: 'get',\n  data: {\n    name: 'value'\n  }\n})\n</code></pre>\n\n<ul>\n\t<li><code>axios.get()</code></li>\n\t<li><code>axios.delete()</code></li>\n\t<li><code>axios.post()</code></li>\n\t<li><code>axios.put()</code></li>\n\t<li><code>axios.patch()</code></li>\n\t<li><code>axios.options()</code></li>\n</ul>\n\n<p>ve bir isteğin HTTP header&#39;larını almak için;</p>\n\n<ul>\n\t<li><code>axios.head()</code></li>\n</ul>\n\n<h2>GET istekleri</h2>\n\n<p>Axios&#39;u kullanmanın uygun bir yolu, modern (ES2017) async/await sözdizimini kullanmaktır. Bu örnek, axios.get() kullanarak tüm köpek ırklarının bir listesini almak için <a href=\"https://dog.ceo/\">Köpek API</a>&#39;sını sorgular ve bunları sayar:</p>\n\n<pre>\n<code class=\"language-javascript\">const axios = require('axios')\n\nconst getKopekTurler = async () =&gt; {\n  try {\n    return await axios.get('https://dog.ceo/api/breeds/list/all')\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst toplam = async () =&gt; {\n  const turler = await getKopekTurler()\n\n  if (breeds.data.message) {\n    console.log(`Toplam: ${Object.entries(turler.data.message).length} köpek türü`)\n  }\n}\ntoplam()\n</code></pre>\n\n<p>async/await kullanmak istemiyorsanız Promises sözdizimini kullanabilirsiniz:</p>\n\n<pre>\n<code class=\"language-javascript\">const axios = require('axios')\n\nconst getKopekTurler = () =&gt; {\n  try {\n    return axios.get('https://dog.ceo/api/breeds/list/all')\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst toplam = async () =&gt; {\n    getKopekTurler()\n    .then(response =&gt; {\n      if (response.data.message) {\n        console.log(`Toplam ${Object.entries(response.data.message).length} köpek türü`)\n      }\n    })\n    .catch(error =&gt; {\n      console.log(error)\n    })\n}\ntoplam()\n</code></pre>\n\n<h2>GET isteklerine parametre ekleme</h2>\n\n<p>Bir GET yanıtı URL&#39;de şu gibi parametreler içerebilir: https://site.com/?name=value</p>\n\n<p>Axios ile bunu şu URL&#39;yi kullanarak yapabilirsiniz:</p>\n\n<pre>\n<code class=\"language-javascript\">axios.get('https://site.com/?name=value')\n</code></pre>\n\n<p>veya params özelliği kullanabilirsiniz:</p>\n\n<pre>\n<code class=\"language-javascript\">axios.get('https://site.com/', {\n  params: {\n    name: 'value'\n  }\n})\n</code></pre>\n\n<h2>POST istekleri</h2>\n\n<p>Bir POST isteği gerçekleştirmek tıpkı bir GET isteği yapmak gibidir, ancak axios.get yerine axios.post kullanırsınız:</p>\n\n<pre>\n<code class=\"language-javascript\">axios.post('https://site.com/')\n</code></pre>\n\n<p>POST parametrelerini içeren bir nesne ikinci argümandır:</p>\n\n<pre>\n<code class=\"language-javascript\">​axios.post('https://site.com/', {\n  name: 'value'\n})</code></pre>\n\n<p><code>POST isteğinde Authorization</code>header;</p>\n\n<pre>\n<code class=\"language-javascript\">const token = Buffer.from(`kullaniciAdi:sifre`, 'utf8').toString('base64')\n\naxios.post(\"http://....\", {\n  headers: {\n    'Authorization': `Basic ${token}`\n  }\n})\n</code></pre>\n",
        "kategori_id": "3ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "",
        "aktif": "1",
        "sira": "1",
        "created_at": "12/6/2020 10:25:38",
        "updated_at": "12/6/2020 14:34:01"
    },
    {
        "id": "0ac425b3-800c-4fed-82f4-3e6d3c9da767",
        "baslik": "Moment.js",
        "url": "momentjs",
        "icerik": "<p><a href=\"https://momentjs.com/\">Moment.js</a>, tarayıcıda ve Node.js&#39;de tarihleri yönetmenize yardımcı olan harika bir JavaScript kütüphanesidir.</p>\n\n<h1>Kurulumu</h1>\n\n<h2>unpkg.com adresini kullanarak doğrudan sayfanıza ekleyebilirsiniz:</h2>\n\n<pre>\n<code class=\"language-html\">&lt;script src=\"https://unpkg.com/moment\" /&gt;</code></pre>\n\n<p>npmkullanabilirsiniz</p>\n\n<pre>\n<code class=\"language-bash\">npm install moment</code></pre>\n\n<p>Npm kullanırsanız paketi içe aktarmanız gerekir</p>\n\n<pre>\n<code class=\"language-javascript\">import moment from 'moment'\n// yada\nconst moment = require('moment')</code></pre>\n\n<h2>Geçerli tarihi ve saati öğrenin</h2>\n\n<pre>\n<code class=\"language-javascript\">const date = moment()\n</code></pre>\n\n<h2>Tarih ayrıştırma</h2>\n\n<p>Bir moment nesnesi, bir string iletilerek bir tarihle başlatılabilir:</p>\n\n<pre>\n<code class=\"language-javascript\">const date = moment(string)</code></pre>\n\n<p>(sırayla) göre ayrıştırılmış herhangi bir dizeyi kabul eder:</p>\n\n<ul>\n\t<li><a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a></li>\n\t<li><a href=\"https://tools.ietf.org/html/rfc2822#section-3.3\">RFC 2822</a> Tarih Saat biçimi</li>\n\t<li>Date nesnesi tarafından kabul edilen biçimler</li>\n</ul>\n\n<p>ISO 8601 kesinlikle en uygun olanıdır. İşte bir biçim referansı:</p>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p>Format</p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p>Anlamı</p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p>örnek</p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>YYYY</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>4-digits Yıl</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2018</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>YY</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digits Yıl</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>M</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digits Ay numarası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>7</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>MM</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digits Ay numarası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>07</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>MMM</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>3-harf Ay numarası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Haz</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>MMMM</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Ay&#39;ın tüm ismi</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Temmuz</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>dddd</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Günü tüm ismi</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Pazar</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>gggg</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>4-digitHafta yılı</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2018</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>gg</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitHafta yılı</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>w</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>0 olmadan yılın haftası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ww</p>\n\t\t\t</td>\n\t\t\t<td>0 ile yılın haftası</td>\n\t\t\t<td>\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>e</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>0&#39;dan başlayan haftanın günü</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>4</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>D</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitGün numarası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>9</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DD</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digit Gün numarası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>09</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Do</p>\n\t\t\t</td>\n\t\t\t<td>Sıra numarasıyla gün sayısı</td>\n\t\t\t<td>\n\t\t\t<p>9th</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>T</p>\n\t\t\t</td>\n\t\t\t<td>Zaman bölümünün başlangıcını gösterir</td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>HH</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitsaat (24 saat biçimli)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>22</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>H</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digits saat(0 olmadığı)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>22</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>kk</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitsaat(24 saat biçimli - 1 / 24)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>23</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>k</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitsaat (0 olmadığı)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>23</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>a/A</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>am</code>yada<code>pm</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>pm</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>hh</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digitsaat (12 saat biçimli)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>11</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>mm</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digit dakika</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>22</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ss</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digit saniye</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>40</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>s</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digit saniye (0 olmadan)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>40</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>S</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>1-digit milisaniye</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>SS</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2-digit milisaniye</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>12</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>SSS</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>3-digit milisaniye</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>123</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Z</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Timezone</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>+02:00</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>x</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>milisaniye biçimli UNIX tarih damgası</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>1410432140575</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Gün belirlemek</h2>\n\n<h3>Tarihi biçimlendirme</h3>\n\n<p>Düz bir JavaScript Tarihi nesnesinin içeriğini çıkarmak istediğinizde, biçimlendirmeyi belirlemek için çok az seçeneğiniz vardır. Yapabileceğiniz tek şey yerleşik yöntemleri kullanmak ve bunları kullanarak istediğiniz tarihi oluşturmaktır. Moment, format() yöntemini kullanarak tarihi ihtiyaçlarınıza göre biçimlendirmek için kullanışlı bir yol sunar:</p>\n\n<pre>\n<code class=\"language-javascript\">date.format(string)\n</code></pre>\n\n<pre>\n<code class=\"language-javascript\">moment().format(\"YYYY Do MM\")\n</code></pre>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p>Sabit</p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p>Format</p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p>örnek</p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.DATETIME_LOCAL</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-MM-DDTHH:mm</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-12-14T16:34</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.DATETIME_LOCAL_SECONDS</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-MM-DDTHH:mm:ss</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-12-14T16:34:10</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.DATETIME_LOCAL_MS</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-MM-DDTHH:mm:ss.SSS</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-12-14T16:34:10.234</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.DATE</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-MM-DD</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-12-14</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.TIME</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>HH:mm</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>16:34</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.TIME_SECONDS</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>HH:mm:ss</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>16:34:10</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.TIME_MS</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>HH:mm:ss.SSS</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>16:34:10.234</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.WEEK</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-[W]WW</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-W50</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><code>moment.HTML5_FMT.MONTH</code></p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>YYYY-MM</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>2017-12</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Bir tarihi doğrulama</h2>\n\n<p>Herhangi bir tarih, isValid() yöntemi kullanılarak geçerliliğini kontrol edebilir:</p>\n\n<pre>\n<code class=\"language-javascript\">moment('2018-13-23').isValid() //false\nmoment('2018-11-23').isValid() //true\n</code></pre>\n\n<h2>X zaman önce,</h2>\n\n<p>Kullanım fromNow()</p>\n\n<pre>\n<code class=\"language-javascript\">moment('2016-11-23').fromNow() //2 yıl önce\nmoment('2018-05-23').fromNow() //1 ay önce\n</code></pre>\n\n<h2>Tarihi değiştirme</h2>\n\n<p>Bir tarihe herhangi bir süre ekleyebilir veya çıkarabilirsiniz:</p>\n\n<pre>\n<code class=\"language-javascript\">moment('2016-11-23').add(1, 'years')\nmoment('2016-11-23').subtract(1, 'years')\n</code></pre>\n\n<h2>Bu değerleri kullanabilirsiniz:</h2>\n\n<ul>\n\t<li>\n\t<p><code>years</code></p>\n\t</li>\n\t<li>\n\t<p><code>quarters</code></p>\n\t</li>\n\t<li>\n\t<p><code>months</code></p>\n\t</li>\n\t<li>\n\t<p><code>weeks</code></p>\n\t</li>\n\t<li>\n\t<p><code>days</code></p>\n\t</li>\n\t<li>\n\t<p><code>hours</code></p>\n\t</li>\n\t<li>\n\t<p><code>minutes</code></p>\n\t</li>\n\t<li>\n\t<p><code>seconds</code></p>\n\t</li>\n\t<li>\n\t<p><code>milliseconds</code></p>\n\t</li>\n</ul>\n",
        "kategori_id": "3ac425b3-800c-4fed-82f4-3e6d3c9da760",
        "etiketler": "",
        "aktif": "1",
        "sira": "0",
        "created_at": "12/6/2020 14:23:17",
        "updated_at": "12/6/2020 14:35:13"
    }
]
